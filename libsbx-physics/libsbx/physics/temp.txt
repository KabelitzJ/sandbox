///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Octree
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////




#include <iostream>
#include <vector>
#include <array>
#include <limits>
#include <algorithm>

// A simple 3D vector class
template<typename T>
struct Vector3 {
    T x, y, z;

    Vector3() : x(T()), y(T()), z(T()) {}
    Vector3(T x, T y, T z) : x(x), y(y), z(z) {}

    bool operator==(const Vector3& other) const {
        return x == other.x && y == other.y && z == other.z;
    }

    Vector3 operator+(const Vector3& other) const {
        return Vector3(x + other.x, y + other.y, z + other.z);
    }

    Vector3& operator+=(const Vector3& other) {
        x += other.x;
        y += other.y;
        z += other.z;
        return *this;
    }

    Vector3 operator*(T scalar) const {
        return Vector3(x * scalar, y * scalar, z * scalar);
    }

    Vector3& operator*=(T scalar) {
        x *= scalar;
        y *= scalar;
        z *= scalar;
        return *this;
    }
};

// A class for axis-aligned bounding boxes
template<typename T>
class BoundingBox {
public:
    Vector3<T> min;
    Vector3<T> max;

    BoundingBox() 
        : min(Vector3<T>(std::numeric_limits<T>::max(), std::numeric_limits<T>::max(), std::numeric_limits<T>::max())),
          max(Vector3<T>(std::numeric_limits<T>::lowest(), std::numeric_limits<T>::lowest(), std::numeric_limits<T>::lowest())) {}

    BoundingBox(const Vector3<T>& min, const Vector3<T>& max) : min(min), max(max) {}

    bool contains(const Vector3<T>& point) const {
        return (point.x >= min.x && point.x <= max.x &&
                point.y >= min.y && point.y <= max.y &&
                point.z >= min.z && point.z <= max.z);
    }

    bool intersects(const BoundingBox& other) const {
        return (min.x <= other.max.x && max.x >= other.min.x &&
                min.y <= other.max.y && max.y >= other.min.y &&
                min.z <= other.max.z && max.z >= other.min.z);
    }

    auto get_octant(int index) const -> BoundingBox {
        auto center = (min + max) * T(0.5);
        switch(index) {
            case 0: return BoundingBox(min, center);
            case 1: return BoundingBox(Vector3<T>(center.x, min.y, min.z), Vector3<T>(max.x, center.y, center.z));
            case 2: return BoundingBox(Vector3<T>(min.x, center.y, min.z), Vector3<T>(center.x, max.y, center.z));
            case 3: return BoundingBox(Vector3<T>(center.x, center.y, min.z), Vector3<T>(max.x, max.y, center.z));
            case 4: return BoundingBox(Vector3<T>(min.x, min.y, center.z), Vector3<T>(center.x, center.y, max.z));
            case 5: return BoundingBox(Vector3<T>(center.x, min.y, center.z), Vector3<T>(max.x, center.y, max.z));
            case 6: return BoundingBox(Vector3<T>(min.x, center.y, center.z), Vector3<T>(center.x, max.y, max.z));
            case 7: return BoundingBox(center, max);
        }
        return BoundingBox();
    }
};

// Node structure
template<typename T, typename U>
class OctreeNode {
public:
    BoundingBox<T> bounds;
    std::vector<std::pair<U, BoundingBox<T>>> values;
    std::array<int, 8> children;

    OctreeNode(const BoundingBox<T>& bounds) : bounds(bounds) {
        children.fill(-1);
    }
};

// Octree class
template<typename T, typename U, size_t threshold, size_t max_depth>
class Octree {
private:
    std::vector<OctreeNode<T, U>> nodes;

public:
    Octree(const BoundingBox<T>& bounding_box) {
        nodes.emplace_back(bounding_box);
    }

    void insert(const U& value, const BoundingBox<T>& bounding_box) {
        insert(0, value, bounding_box, 0);
    }

    std::vector<U> query(const BoundingBox<T>& bounding_box) const {
        std::vector<U> result;
        query(0, bounding_box, result);
        return result;
    }

    std::vector<std::pair<U, U>> intersections() const {
        std::vector<std::pair<U, U>> result;
        intersections(0, result);
        return result;
    }

private:
    void insert(int node_index, const U& value, const BoundingBox<T>& bounding_box, size_t current_depth) {
        auto& node = nodes[node_index];

        if (current_depth >= max_depth) {
            node.values.emplace_back(value, bounding_box);
            return;
        }

        if (node.values.size() < threshold) {
            node.values.emplace_back(value, bounding_box);
            return;
        }

        if (node.children[0] == -1) {
            for (int i = 0; i < 8; ++i) {
                auto child_bounding_box = node.bounds.get_octant(i);
                node.children[i] = nodes.size();
                nodes.emplace_back(child_bounding_box);
            }
        }

        for (int i = 0; i < 8; ++i) {
            auto& child = nodes[node.children[i]];
            if (child.bounds.intersects(bounding_box)) {
                insert(node.children[i], value, bounding_box, current_depth + 1);
            }
        }
    }

    void query(int node_index, const BoundingBox<T>& bounding_box, std::vector<U>& result) const {
        const auto& node = nodes[node_index];

        if (!node.bounds.intersects(bounding_box)) {
            return;
        }

        for (const auto& value_pair : node.values) {
            if (bounding_box.intersects(value_pair.second)) {
                result.push_back(value_pair.first);
            }
        }

        if (node.children[0] != -1) {
            for (const auto& child_index : node.children) {
                if (child_index != -1) {
                    query(child_index, bounding_box, result);
                }
            }
        }
    }

    void intersections(int node_index, std::vector<std::pair<U, U>>& result) const {
        const auto& node = nodes[node_index];

        // Check intersections within the current node's values
        for (size_t i = 0; i < node.values.size(); ++i) {
            for (size_t j = i + 1; j < node.values.size(); ++j) {
                if (node.values[i].second.intersects(node.values[j].second)) {
                    result.emplace_back(node.values[i].first, node.values[j].first);
                }
            }
        }

        // Check intersections between children
        for (int i = 0; i < 8; ++i) {
            if (node.children[i] != -1) {
                intersections(node.children[i], result);

                for (int j = i + 1; j < 8; ++j) {
                    if (node.children[j] != -1) {
                        find_intersections_between_nodes(node.children[i], node.children[j], result);
                    }
                }
            }
        }
    }

    void find_intersections_between_nodes(int node_index1, int node_index2, std::vector<std::pair<U, U>>& result) const {
        const auto& node1 = nodes[node_index1];
        const auto& node2 = nodes[node_index2];

        for (const auto& value1 : node1.values) {
            for (const auto& value2 : node2.values) {
                if (value1.second.intersects(value2.second)) {
                    result.emplace_back(value1.first, value2.first);
                }
            }
        }

        for (int i = 0; i < 8; ++i) {
            if (node1.children[i] != -1) {
                for (int j = 0; j < 8; ++j) {
                    if (node2.children[j] != -1) {
                        find_intersections_between_nodes(node1.children[i], node2.children[j], result);
                    }
                }
            }
        }
    }
};

int main() {
    BoundingBox<float> root_bounding_box(Vector3<float>(0.0f, 0.0f, 0.0f), Vector3<float>(1.0f, 1.0f, 1.0f));
    Octree<float, Vector3<float>, 4, 5> octree(root_bounding_box);

    octree.insert(Vector3<float>(0.1f, 0.1f, 0.1f), BoundingBox<float>(Vector3<float>(0.1f, 0.1f, 0.1f), Vector3<float>(0.2f, 0.2f, 0.2f)));
    octree.insert(Vector3<float>(0.15f, 0.15f, 0.15f), BoundingBox<float>(Vector3<float>(0.15f, 0.15f, 0.15f), Vector3<float>(0.25f, 0.25f, 0.25f)));
    octree.insert(Vector3<float>(0.3f, 0.3f, 0.3f), BoundingBox<float>(Vector3<float>(0.3f, 0.3f, 0.3f), Vector3<float>(0.4f, 0.4f, 0.4f)));
    octree.insert(Vector3<float>(0.35f, 0.35f, 0.35f), BoundingBox<float>(Vector3<float>(0.35f, 0.35f, 0.35f), Vector3<float>(0.45f, 0.45f, 0.45f)));

    auto result = octree.query(BoundingBox<float>(Vector3<float>(0.2f, 0.2f, 0.2f), Vector3<float>(0.3f, 0.3f, 0.3f)));

    std::cout << "Query results:" << std::endl;
    for (const auto& value : result) {
        std::cout << "(" << value.x << ", " << value.y << ", " << value.z << ")" << std::endl;
    }

    auto intersections_result = octree.intersections();
    std::cout << "Intersections:" << std::endl;
    for (const auto& pair : intersections_result) {
        std::cout << "Intersection between (" << pair.first.x << ", " << pair.first.y << ", " << pair.first.z << ") and ("
                  << pair.second.x << ", " << pair.second.y << ", " << pair.second.z << ")" << std::endl;
    }

    return 0;
}





///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Quadtree
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////






#ifndef LIBSBX_PHYSICS_QUADTREE_HPP_
#define LIBSBX_PHYSICS_QUADTREE_HPP_

#include <range/v3/all.hpp>

#include <libsbx/utility/enum.hpp>

#include <libsbx/math/vector2.hpp>
#include <libsbx/math/uuid.hpp>

#include <libsbx/memory/static_vector.hpp>

namespace sbx::physics {

/**
 *        max
 * +--------+
 * |        |
 * |        |
 * |        |
 * +--------+
 * min
 */
class box {

public:

  constexpr box(const math::vector2& min, const math::vector2& max) noexcept
  : _min{min}, _max{max} { }

  constexpr auto min() const noexcept -> const math::vector2& {
    return _min;
  }

  constexpr auto max() const noexcept -> const math::vector2& {
    return _max;
  }

  constexpr auto center() const noexcept -> math::vector2 {
    return (_min + _max) / static_cast<std::float_t>(2);
  }

  constexpr auto size() const noexcept -> math::vector2 {
    return _max - _min;
  }

  constexpr auto contains(const math::vector2& point) const noexcept -> bool {
    return point.x() >= _min.x() && point.x() <= _max.x() && point.y() >= _min.y() && point.y() <= _max.y();
  }

  constexpr auto contains(const box& other) const noexcept -> bool {
    return _min.x() <= other._min.x() && _min.y() <= other._min.y() && _max.x() >= other._max.x() && _max.y() >= other._max.y();
  }

  constexpr auto intersects(const box& other) const noexcept -> bool {
    return _min.x() <= other._max.x() && _max.x() >= other._min.x() && _min.y() <= other._max.y() && _max.y() >= other._min.y();
  }

private:

  math::vector2 _min;
  math::vector2 _max;

}; // class box

template<typename Type, std::size_t Threshold = 16u, std::size_t Depth = 8u>
class quadtree {

  inline static constexpr auto threshold = Threshold;
  inline static constexpr auto depth = Depth;

  struct node {
    
    using id = std::uint32_t;

    inline constexpr static auto null = static_cast<id>(-1);

    /**
     * +---+---+
     * | 0 | 1 |
     * +---+---+
     * | 2 | 3 |
     * +---+---+
     */
    enum class quadrant : std::uint8_t {
      top_left = 0,
      top_right = 1,
      bottom_left = 2,
      bottom_right = 3
    }; // enum class quadrant

    node() noexcept
    : children{null, null, null, null} { }

    auto child_at(const quadrant quadrant) const noexcept -> id {
      return children[utility::to_underlying(quadrant)];
    }

    auto is_leaf() const noexcept -> bool {
      return child_at(quadrant::top_left) == null;
    }

    auto push_back(std::pair<Type, box>&& value) -> void {
      values.push_back(std::move(value));
    }

    static auto child_box(const box& box, const quadrant quadrant) -> physics::box {
      const auto& min = box.min();
      const auto& max = box.max();
      const auto& center = box.center();

      switch (quadrant) {
        case quadrant::top_left: {
          return physics::box{math::vector2{min.x(), center.y()}, math::vector2{center.x(), max.y()}};
        }
        case quadrant::top_right: {
          return physics::box{math::vector2{center.x(), center.y()}, math::vector2{max.x(), max.y()}};
        }
        case quadrant::bottom_left: {
          return physics::box{math::vector2{min.x(), min.y()}, math::vector2{center.x(), center.y()}};
        }
        case quadrant::bottom_right: {
          return physics::box{math::vector2{center.x(), min.y()}, math::vector2{max.y(), center.y()}};
        }
      }

      throw std::runtime_error{"invalid value for enum quadrant"};
    }

    static auto find_quadrant(const box& outer, const box& inner) noexcept -> std::optional<quadrant> {
      auto center = outer.center();

      if (inner.min().x() < center.x()) {
        if (inner.min().y() < center.y()) {
          return quadrant::top_left;
        } 
        
        if (inner.max().y() >= center.y()) {
          return quadrant::bottom_left;
        } 
        
        return std::nullopt;
      } 
      
      if (inner.min().x() >= center.x()) {
        if (inner.min().y() < center.y()) {
          return quadrant::top_right;
        } 
        
        if (inner.max().y() >= center.y()) {
          return quadrant::bottom_left;
        }
        
        return std::nullopt;
      }
      
      return std::nullopt;
    }

    memory::static_vector<std::pair<Type, box>, threshold> values;
    std::array<id, 4> children{null, null, null, null};
  
  }; // struct node

public:

  using value_type = Type;
  using reference = value_type&;
  using const_reference = const value_type&;

  quadtree(const box& bounds) noexcept
  : _bounds{bounds} { 
    _root = 0u;
    _nodes.push_back(node{});
  }

  auto insert(const value_type& value, const box& bounds) noexcept -> void {
    _insert(_root, _bounds, value, bounds, 0u);
  }

  auto query(const box& bounds) -> std::vector<value_type> {
    auto values = std::vector<value_type>{};

    _query(_root, _bounds, bounds, values);

    return values;
  }

  auto intersections() -> std::vector<std::pair<value_type, value_type>> {
    auto values = std::vector<std::pair<value_type, value_type>>{};

    _intersections(_root, _bounds, values);

    return values;
  }

private:

  void _insert(node::id node_id, const box& bounds, const value_type& value, const box& value_bounds, std::size_t current_depth) {
    if (!bounds.contains(value_bounds)) {
      return;
    }

    if (_nodes[node_id].is_leaf()) {
      if (_nodes[node_id].values.size() < Threshold || current_depth >= depth) {
        _nodes[node_id].push_back({value, value_bounds});
      } else {
        _split(node_id, bounds);
        _insert(node_id, bounds, value, value_bounds, current_depth);
      }
    } else {
      const auto quadrant = node::find_quadrant(bounds, value_bounds);

      if (quadrant) {
        _insert(_nodes[node_id].child_at(*quadrant), node::child_box(bounds, *quadrant), value, value_bounds, current_depth + 1u);
      } else {
        _nodes[node_id].values.push_back({value, value_bounds});
      }
    }
  }

  auto _split(node::id node_id, const box& bounds) -> void {
    const auto current_size = _nodes.size();

    for (auto&& [i, child] : ranges::views::enumerate(_nodes[node_id].children)) {
      child = static_cast<node::id>(current_size + i);
    }

    _nodes.insert(_nodes.end(), _nodes[node_id].children.size(), node{});

    auto new_values = memory::static_vector<std::pair<Type, box>, threshold>{};

    for (const auto& [value, child_bounds] : _nodes[node_id].values) {
      const auto quadrant = node::find_quadrant(bounds, child_bounds);

      if (quadrant) {
        const auto child_id = _nodes[node_id].child_at(*quadrant);
        _nodes[child_id].values.push_back({value, child_bounds});
      } else {
        new_values.push_back({value, child_bounds});
      }
    }

    _nodes[node_id].values = new_values;
  }

  auto _query(node::id node_id, const box& bounds, const box& value_bounds, std::vector<value_type>& values) -> void {
    if (!bounds.contains(value_bounds)) {
      return;
    }

    for (const auto& [value, child_bounds] : _nodes[node_id].values) {
      if (bounds.intersects(child_bounds)) {
        values.push_back(value);
      }
    }

    if (!_nodes[node_id].is_leaf()) {
      for (auto&& [i, child] : ranges::views::enumerate(_nodes[node_id].children)) {
        auto child_bounds = node::child_box(bounds, static_cast<node::id>(i));

        if (bounds.intersects(child_bounds)) {
          _query(_nodes[child], child_bounds, value_bounds, values);
        }
      }
    }
  }

  auto _intersections(node::id node_id, const box& bounds, std::vector<std::pair<value_type, value_type>>& values) -> void {
    for (auto i : std::views::iota(0u, _nodes[node_id].values.size())) {
      for (auto j : std::views::iota(0u, i)) {
        if (_nodes[node_id].values[i].second.intersects(_nodes[node_id].values[j].second)) {
          values.push_back({_nodes[node_id].values[i].first, _nodes[node_id].values[j].first});
        }
      }
    }

    if (!_nodes[node_id].is_leaf()) {
      for (const auto& child_id : _nodes[node_id].children) {
        for (const auto& [value, box] : _nodes[node_id].values) {
          _intersections_with_descendants(child_id, value, box, values);
        }
      }

      for (auto&& [i, child] : ranges::views::enumerate(_nodes[node_id].children)) {
        auto child_bounds = node::child_box(bounds, static_cast<node::quadrant>(i));

        _intersections(child, child_bounds, values);
      }
    }
  }

  auto _intersections_with_descendants(node::id node_id, const value_type& value, const box& value_bounds, std::vector<std::pair<value_type, value_type>>& values) -> void {
    for (const auto& [entry, bound] :  _nodes[node_id].values) {
      if (bound.intersects(value_bounds)) {
        values.push_back({value, entry});
      }
    }

    if (!_nodes[node_id].is_leaf()) {
      for (const auto& child : _nodes[node_id].children) {
        _intersections_with_descendants(child, value, value_bounds, values);
      }
    }
  }

  box _bounds;
  node::id _root;
  std::vector<node> _nodes;

}; // class quadtree

} // namespace sbx::physics

#endif // LIBSBX_PHYSICS_QUADTREE_HPP_



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
GJK
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#if 0

class simplex {

public:

  using value_type = math::vector3;
  using reference = value_type;
  using const_iterator = const value_type*;

  simplex()
  : _size{0} { }

	auto operator=(std::initializer_list<value_type> list) -> simplex& {
		_size = 0u;

		for (const auto& point : list) {
			_points[_size++] = point;
    }

		return *this;
	}

	auto push_front(const value_type& point) -> void {
		_points = { point, _points[0], _points[1], _points[2] };
		_size = std::min(_size + 1u, std::size_t{4});
	}

	auto operator[](const std::size_t index) -> reference { 
    return _points[index]; 
  }

	auto size() const noexcept -> std::size_t { 
    return _size; 
  }

	auto begin() const -> const_iterator { 
    return _points.begin(); 
  }

	auto end() const -> const_iterator {
    return _points.end() - (4u - _size); 
  }

private:

  std::array<math::vector3, 4u> _points;
  std::size_t _size;

}; // class simplex

static auto same_direction(const math::vector3& lhs, const math::vector3& rhs) -> bool {
  return math::vector3::dot(lhs, rhs) > 0.0f;
}

static auto line(simplex& simplex, math::vector3& direction) -> bool {
  auto a = simplex[0];
	auto b = simplex[1];

	auto ab = b - a;
	auto ao = -a;
 
	if (same_direction(ab, ao)) {
		direction = math::vector3::cross(math::vector3::cross(ab, ao), ab);
	} else {
		simplex = { a };
		direction = ao;
	}

	return false;
}

static auto triangle(simplex& simplex, math::vector3& direction) -> bool {
  auto a = simplex[0];
	auto b = simplex[1];
	auto c = simplex[2];

	auto ab = b - a;
	auto ac = c - a;
	auto ao =   - a;
 
	auto abc = math::vector3::cross(ab, ac);
 
	if (same_direction(math::vector3::cross(abc, ac), ao)) {
		if (same_direction(ac, ao)) {
			simplex = { a, c };
			direction = math::vector3::cross(math::vector3::cross(ac, ao), ac);
		} else {
			return line(simplex = { a, b }, direction);
		}
	} else {
		if (same_direction(math::vector3::cross(ab, abc), ao)) {
			return line(simplex = { a, b }, direction);
		} else {
			if (same_direction(abc, ao)) {
				direction = abc;
			} else {
				simplex = { a, c, b };
				direction = -abc;
			}
		}
	}

	return false;
}

static auto tetrahedron(simplex& simplex, math::vector3& direction) -> bool {
  auto a = simplex[0];
	auto b = simplex[1];
	auto c = simplex[2];
	auto d = simplex[3];

	auto ab = b - a;
	auto ac = c - a;
	auto ad = d - a;
	auto ao =   - a;
 
	auto abc = math::vector3::cross(ab, ac);
	auto acd = math::vector3::cross(ac, ad);
	auto adb = math::vector3::cross(ad, ab);
 
	if (same_direction(abc, ao)) {
		return triangle(simplex = { a, b, c }, direction);
	}
		
	if (same_direction(acd, ao)) {
		return triangle(simplex = { a, c, d }, direction);
	}
 
	if (same_direction(adb, ao)) {
		return triangle(simplex = { a, d, b }, direction);
	}
 
	return true;
}

static auto next_simplex(simplex& simplex, math::vector3& direction) -> bool {
  switch (simplex.size()) {
    case 2u: return line(simplex, direction);
    case 3u: return triangle(simplex, direction);
    case 4u: return tetrahedron(simplex, direction);
  }

  return false;
}

template<math::unsigned_integral Start, math::unsigned_integral End, math::unsigned_integral Step>
static auto stepped_iota(const Start start, const End end, const Step step = Step{1u}) {
  return std::ranges::views::iota(0u, (end - start + step - 1) / step) | std::ranges::views::transform([=](auto x) { return x * step + start; });
}

auto get_face_normals(const std::vector<math::vector3>& polytope, const std::vector<std::size_t>& faces) -> std::pair<std::vector<math::vector4>, std::size_t> {
	auto normals = std::vector<math::vector4>{};

	auto min_triangle = std::size_t{0};
	auto min_distance = std::numeric_limits<std::float_t>::max();

	for (auto i : stepped_iota(0u, faces.size(), 3u)) {
		auto a = polytope[faces[i + 0u]];
		auto b = polytope[faces[i + 1u]];
		auto c = polytope[faces[i + 2u]];

		auto normal = math::vector3::normalized(math::vector3::cross(b - a, c - a));
		auto distance = math::vector3::dot(normal, a);

		if (distance < 0) {
			normal *= -1.0f;
			distance *= -1.0f;
		}

		normals.emplace_back(normal, distance);

		if (distance < min_distance) {
			min_triangle = i / 3u;
			min_distance = distance;
		}
	}

	return {normals, min_triangle};
}

auto add_if_unique_edge(std::vector<std::pair<std::size_t, std::size_t>>& edges, const std::vector<std::size_t>& faces, std::size_t a, std::size_t b) -> void {
	auto reverse = std::find(                     //      0--<--3
		edges.begin(),                              //     / \ B /   A: 2-0
		edges.end(),                                //    / A \ /    B: 0-2
		std::make_pair(faces[b], faces[a])          //   1-->--2
	);
 
	if (reverse != edges.end()) {
		edges.erase(reverse);
	} else {
		edges.emplace_back(faces[a], faces[b]);
	}
}

static auto epa(const simplex& simplex, const collider_data& first, const collider_data& second) -> std::optional<math::vector3> {
  auto polytope = std::vector<math::vector3>{simplex.begin(), simplex.end()};

  auto faces = std::vector<std::size_t>{
    0u, 1u, 2u,
		0u, 3u, 1u,
		0u, 2u, 3u,
		1u, 3u, 2u
  };

  auto [normals, min_face] = get_face_normals(polytope, faces);

  auto min_normal = math::vector3{};
	auto min_distance = std::numeric_limits<std::float_t>::max();
	
	auto iterations = 0u;

  while (min_distance == std::numeric_limits<std::float_t>::max()) {
    min_normal   = math::vector3{normals[min_face]};
    min_distance = normals[min_face].w();

    if (iterations++ > 32u) {
      break;
    }

    auto support = physics::support(first, second, min_normal);
    auto distance = math::vector3::dot(min_normal, support);

    if (std::abs(distance - min_distance) > 0.001f) {
      min_distance = std::numeric_limits<std::float_t>::max();

      auto unique_edges = std::vector<std::pair<std::size_t, std::size_t>>{};

      for (auto i = 0u; i < normals.size(); ++i) {
        if (same_direction(math::vector3{normals[i]}, support)) {
          auto f = i * 3u;

          add_if_unique_edge(unique_edges, faces, f + 0u, f + 1u);
          add_if_unique_edge(unique_edges, faces, f + 1u, f + 2u);
          add_if_unique_edge(unique_edges, faces, f + 2u, f + 0u);

          faces[f + 2u] = faces.back(); faces.pop_back();
          faces[f + 1u] = faces.back(); faces.pop_back();
          faces[f + 0u] = faces.back(); faces.pop_back();

          normals[i] = normals.back(); normals.pop_back();

          i--;
        }
      }

      if (unique_edges.size() == 0u) {
        break;
      }

      auto new_faces = std::vector<std::size_t>{};

      for (auto [edge1, edge2] : unique_edges) {
        new_faces.push_back(edge1);
        new_faces.push_back(edge2);
        new_faces.push_back(polytope.size());
      }

      polytope.push_back(support);

      auto [new_normals, new_min_face] = get_face_normals(polytope, new_faces);

      float new_min_distance = std::numeric_limits<std::float_t>::max();

      for (auto i : std::views::iota(0u, normals.size())) {
        if (normals[i].w() < new_min_distance) {
          new_min_distance = normals[i].w();
          min_face = i;
        }
      }

      if (new_normals[new_min_face].w() < new_min_distance) {
        min_face = new_min_face + normals.size();
      }

      faces.insert(faces.end(), new_faces.begin(), new_faces.end());
      normals.insert(normals.end(), new_normals.begin(), new_normals.end());
    }
  }

  if (min_distance == std::numeric_limits<std::float_t>::max()) {
    return std::nullopt;
  }

  return min_normal * (min_distance + 0.001f);
}

auto gjk(const collider_data& first, const collider_data& second) -> std::optional<math::vector3> {
  auto simplex = physics::simplex{};

  auto support = physics::support(first, second, math::vector3{1.0f, 0.0f, 0.0f});

  simplex.push_front(support);

  auto direction = -support;

  for ([[maybe_unused]] auto iteration : std::views::iota(0u, 32u)) {
    support = physics::support(first, second, direction);

    if (math::vector3::dot(support, direction) <= 0.0f) {
      return std::nullopt;
    }

    simplex.push_front(support);

    if (next_simplex(simplex, direction)) {
      return epa(simplex, first, second);
    }
  }

  return std::nullopt;
}

#else

static auto update_simplex3(math::vector3& a, math::vector3& b, math::vector3& c, math::vector3& d, std::uint32_t& dimension, math::vector3& direction) -> void {
  const auto n = math::vector3::cross(b - a, c - a);
  const auto ao = -a;

  dimension = 2u;

  if (math::vector3::dot(math::vector3::cross(b - a, n), ao) > 0.0f) {
    c = a;
    direction = math::vector3::cross(math::vector3::cross(b - a, ao), b - a);
    return;
  } 
  
  if (math::vector3::dot(math::vector3::cross(n, c - a), ao) > 0.0f) {
    b = a;
    direction = math::vector3::cross(math::vector3::cross(c - a, ao), c - a);
    return;
  }

  dimension = 3u;

  if (math::vector3::dot(n, ao) > 0.0f) {
    d = c;
    c = b;
    b = a;
    direction = n;
    return;
  }

  d = b;
  b = a;
  direction = -n; 
}

static auto update_simplex4(math::vector3& a, math::vector3& b, math::vector3& c, math::vector3& d, std::uint32_t& dimension, math::vector3& direction) -> bool {
  const auto abc = math::vector3::cross(b - a, c - a);
  const auto acd = math::vector3::cross(c - a, d - a);
  const auto adb = math::vector3::cross(d - a, b - a);

  const auto ao = -a;
  dimension = 3u;

  if (math::vector3::dot(abc, ao) > 0.0f) {
    d = c;
    c = b;
    b = a;
    direction = abc;
    return false;
  }

  if (math::vector3::dot(acd, ao) > 0.0f) {
    b = a;
    direction = acd;
    return false;
  }

  if (math::vector3::dot(adb, ao) > 0.0f) {
    c = d;
    d = b;
    b = a;
    direction = adb;
    return false;
  }

  return true;
}

static auto expanding_polytope(const math::vector3& a, const math::vector3& b, const math::vector3& c, const math::vector3& d, const collider_data& first, const collider_data& second) -> math::vector3 {
  static constexpr auto tolerance = 0.0001f;
  static constexpr auto bias = 0.000001f;
  static constexpr auto max_faces = 64u;
  static constexpr auto max_loose_edges = 32u;
  static constexpr auto max_iterations = 64u;

  auto faces = std::array<std::array<math::vector3, 4u>, max_faces>{};

  //Init with final simplex from GJK
  faces[0][0] = a;
  faces[0][1] = b;
  faces[0][2] = c;
  faces[0][3] = math::vector3::normalized(math::vector3::cross(b-a, c-a)); //ABC
  faces[1][0] = a;
  faces[1][1] = c;
  faces[1][2] = d;
  faces[1][3] = math::vector3::normalized(math::vector3::cross(c-a, d-a)); //ACD
  faces[2][0] = a;
  faces[2][1] = d;
  faces[2][2] = b;
  faces[2][3] = math::vector3::normalized(math::vector3::cross(d-a, b-a)); //ADB
  faces[3][0] = b;
  faces[3][1] = d;
  faces[3][2] = c;
  faces[3][3] = math::vector3::normalized(math::vector3::cross(d-b, c-b)); //BDC

  auto num_faces = 4u;
  auto closest_face = 0u;

  for (auto iteration : std::views::iota(0u, max_iterations)) {
    auto min_distance = math::vector3::dot(faces[0][0], faces[0][3]);
    closest_face = 0u;

    for (auto i : std::views::iota(1u, num_faces)) {
      const auto distance = math::vector3::dot(faces[i][0], faces[i][3]);

      if (distance < min_distance) {
        min_distance = distance;
        closest_face = i;
      }
    }

    auto search_dir = faces[closest_face][3]; 
    auto p = support(first, second, search_dir);

    if (math::vector3::dot(p, search_dir)- min_distance < tolerance) {
      return faces[closest_face][3] * math::vector3::dot(p, search_dir);
    }

    auto loose_edges = std::array<std::array<math::vector3, 2u>, max_loose_edges>{};
    auto num_loose_edges = 0u;

    //Find all triangles that are facing p
    for (auto i : std::views::iota(0u, num_faces)) {
      if (math::vector3::dot(faces[i][3], p - faces[i][0]) > 0) {
        for (auto j : std::views::iota(0u, 3u)) {
          auto current_edge = std::array<math::vector3, 2u>{faces[i][j], faces[i][(j + 1) % 3]};
          auto found_edge = false;

          for (auto k : std::views::iota(0u, num_loose_edges)) {
            if (loose_edges[k][1]==current_edge[0] && loose_edges[k][0]==current_edge[1]){
              loose_edges[k][0] = loose_edges[num_loose_edges-1][0];
              loose_edges[k][1] = loose_edges[num_loose_edges-1][1];

              num_loose_edges--;

              found_edge = true;

              k=num_loose_edges;
            }
          }

          if (!found_edge) {
            if (num_loose_edges >= max_loose_edges) {
              break;
            }

            loose_edges[num_loose_edges][0] = current_edge[0];
            loose_edges[num_loose_edges][1] = current_edge[1];

            num_loose_edges++;
          }
        }

        faces[i][0] = faces[num_faces-1][0];
        faces[i][1] = faces[num_faces-1][1];
        faces[i][2] = faces[num_faces-1][2];
        faces[i][3] = faces[num_faces-1][3];
        num_faces--;
        i--;
      }
    }
    
    for (auto i : std::views::iota(0u, num_loose_edges)) {
      if (num_faces >= max_faces) {
        break;
      }

      faces[num_faces][0] = loose_edges[i][0];
      faces[num_faces][1] = loose_edges[i][1];
      faces[num_faces][2] = p;
      faces[num_faces][3] = math::vector3::normalized(math::vector3::cross(loose_edges[i][0]-loose_edges[i][1], loose_edges[i][0]-p));
  
      if (math::vector3::dot(faces[num_faces][0], faces[num_faces][3]) + bias < 0.0f) {
        auto temp = faces[num_faces][0];
        faces[num_faces][0] = faces[num_faces][1];
        faces[num_faces][1] = temp;
        faces[num_faces][3] = -faces[num_faces][3];
      }

      num_faces++;
    }
  }

  return faces[closest_face][3] * math::vector3::dot(faces[closest_face][0], faces[closest_face][3]);
}

auto gjk(const collider_data& first, const collider_data& second) -> std::optional<math::vector3> {
  static constexpr auto max_iterations = 64u;

  auto a = math::vector3{};
  auto b = math::vector3{};
  auto c = math::vector3{};
  auto d = math::vector3{};

  auto direction = first.position - second.position;

  c = support(first, second, direction);

  direction = -c;
  
  b = support(first, second, direction);

  if (math::vector3::dot(b, direction) <= 0.0f) {
    return std::nullopt;
  }

  direction = math::vector3::cross(math::vector3::cross(c - b, -b), c - b);

  if (direction == math::vector3::zero) {
    direction = math::vector3::cross(c - b, math::vector3::right);

    if (direction == math::vector3::zero) {
      direction = math::vector3::cross(c - b, math::vector3::forward);
    }
  }

  auto dimension = 2u;

  for (auto iteration : std::views::iota(0u, max_iterations)) {
    a = support(first, second, direction);

    if (math::vector3::dot(a, direction) < 0.0f) {
      return std::nullopt;
    }

    dimension++;

    if (dimension == 3u) {
      update_simplex3(a, b, c, d, dimension, direction);
    } else if (update_simplex4(a, b, c, d, dimension, direction)) {
      return expanding_polytope(a, b, c, d, first, second);
    }
  }

  return std::nullopt;
}

#endif // FIRST
